From 0be37a2288c3692e7165221326d257e54f50e8c9 Mon Sep 17 00:00:00 2001
From: Yvan Mokwinski <yvan.mokwinski@gmail.com>
Date: Mon, 6 Mar 2023 09:17:29 -0700
Subject: [PATCH] fixing fma ambiguities (#516)

* fixing fma ambiguities
---
 library/CMakeLists.txt                        |  2 +-
 library/include/rocsparse-complex-types.h     |  2 +-
 .../rocsparse_csxsldu_preprocess.cpp          |  1 -
 library/src/include/common.h                  | 24 ++++++++++++++-----
 4 files changed, 20 insertions(+), 9 deletions(-)

diff --git a/library/CMakeLists.txt b/library/CMakeLists.txt
index 7d3b2f8f..1aebfd70 100644
--- a/library/CMakeLists.txt
+++ b/library/CMakeLists.txt
@@ -1,5 +1,5 @@
 # ########################################################################
-# Copyright (C) 2018-2022 Advanced Micro Devices, Inc. All rights Reserved.
+# Copyright (C) 2018-2023 Advanced Micro Devices, Inc. All rights Reserved.
 #
 # Permission is hereby granted, free of charge, to any person obtaining a copy
 # of this software and associated documentation files (the "Software"), to deal
diff --git a/library/include/rocsparse-complex-types.h b/library/include/rocsparse-complex-types.h
index f291cfe1..ab68ec1f 100644
--- a/library/include/rocsparse-complex-types.h
+++ b/library/include/rocsparse-complex-types.h
@@ -200,7 +200,7 @@ class rocsparse_complex_num
 
     static __forceinline__ __device__ __host__ float fma(float p, float q, float r)
     {
-        return ::fma(p, q, r);
+        return ::fmaf(p, q, r);
     }
 
     static __forceinline__ __device__ __host__ double fma(double p, double q, double r)
diff --git a/library/src/include/common.h b/library/src/include/common.h
index 60a9a51c..854b556e 100644
--- a/library/src/include/common.h
+++ b/library/src/include/common.h
@@ -71,12 +71,29 @@ __device__ __forceinline__ double rocsparse_ldg(const double* ptr) { return __ld
 __device__ __forceinline__ rocsparse_float_complex rocsparse_ldg(const rocsparse_float_complex* ptr) { return rocsparse_float_complex(__ldg((const float*)ptr), __ldg((const float*)ptr + 1)); }
 __device__ __forceinline__ rocsparse_double_complex rocsparse_ldg(const rocsparse_double_complex* ptr) { return rocsparse_double_complex(__ldg((const double*)ptr), __ldg((const double*)ptr + 1)); }
 
-__device__ __forceinline__ int32_t rocsparse_fma(int32_t p, int32_t q, int32_t r) { return fma(p, q, r); }
+
+template <typename T>
+__device__ __forceinline__ T rocsparse_fma(T p, T q, T r);
+
+template <>
+__device__ __forceinline__ int32_t rocsparse_fma(int32_t p, int32_t q, int32_t r) { return p * q + r; }
+
+template <>
+__device__ __forceinline__ int64_t rocsparse_fma(int64_t p, int64_t q, int64_t r) { return p * q + r; }
+
+template <>
 __device__ __forceinline__ float rocsparse_fma(float p, float q, float r) { return fma(p, q, r); }
+
+template <>
 __device__ __forceinline__ double rocsparse_fma(double p, double q, double r) { return fma(p, q, r); }
+
+template <>
 __device__ __forceinline__ rocsparse_float_complex rocsparse_fma(rocsparse_float_complex p, rocsparse_float_complex q, rocsparse_float_complex r) { return std::fma(p, q, r); }
+
+template <>
 __device__ __forceinline__ rocsparse_double_complex rocsparse_fma(rocsparse_double_complex p, rocsparse_double_complex q, rocsparse_double_complex r) { return std::fma(p, q, r); }
 
+
 __device__ __forceinline__ float rocsparse_abs(float x) { return x < 0.0f ? -x : x; }
 __device__ __forceinline__ double rocsparse_abs(double x) { return x < 0.0 ? -x : x; }
 __device__ __forceinline__ float rocsparse_abs(rocsparse_float_complex x) { return std::abs(x); }
@@ -208,11 +225,6 @@ __device__ __forceinline__ T conj_val(T val, bool conj)
     return conj ? rocsparse_conj(val) : val;
 }
 
-template <typename T>
-__device__ __forceinline__ T rocsparse_fma(T p, T q, T r)
-{
-    return rocsparse_fma(p, q, r);
-}
 
 // Block reduce kernel computing block sum
 template <unsigned int BLOCKSIZE, typename T>
